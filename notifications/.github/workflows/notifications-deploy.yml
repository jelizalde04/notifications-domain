name: Docker Build and Deploy - Backend Microservice

on:
  pull_request:
    types:
      - closed
    branches:
      - test
      - main

jobs:
  build_backend_image:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

  deploy_backend_qa:
    needs: build_backend_image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    steps:
      - name: Deploy to EC2 QA
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_FOLLOWER_DOMAIN_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker ps -a --format '{{.Names}}' | grep -Eq "^backend$" && docker stop backend && docker rm backend

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

            docker run -d \
              --name backend \
              -p 8001:8001 \
              -p 50051:50051 \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e NOTIFICATIONS_DB_NAME="${{ secrets.NOTIFICATIONS_DB_NAME }}" \
              -e RESPONSIBLE_DB_NAME="${{ secrets.RESPONSIBLE_DB_NAME }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

            docker image prune -f

            IMAGES_IN_USE=$(docker ps --format '{{.Image}}' | xargs -n1 docker inspect --format '{{.Id}}' 2>/dev/null | sort -u)
            docker images "${{ secrets.DOCKERHUB_USERNAME }}/backend" --format '{{.ID}}' | sort -u | while read -r IMAGE_ID; do
              if ! echo "$IMAGES_IN_USE" | grep -q "$IMAGE_ID"; then
                docker rmi "$IMAGE_ID" || true
              fi
            done

            docker system prune -af || true

  deploy_backend_prod:
    needs: build_backend_image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2 PROD
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_FOLLOWER_DOMAIN_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          port: 22
          script: |
            docker ps -a --format '{{.Names}}' | grep -Eq "^backend$" && docker stop backend && docker rm backend

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

            docker run -d \
              --name backend \
              -p 8001:8001 \
              -p 50051:50051 \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e NOTIFICATIONS_DB_NAME="${{ secrets.NOTIFICATIONS_DB_NAME }}" \
              -e RESPONSIBLE_DB_NAME="${{ secrets.RESPONSIBLE_DB_NAME }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

            docker image prune -f

            IMAGES_IN_USE=$(docker ps --format '{{.Image}}' | xargs -n1 docker inspect --format '{{.Id}}' 2>/dev/null | sort -u)
            docker images "${{ secrets.DOCKERHUB_USERNAME }}/backend" --format '{{.ID}}' | sort -u | while read -r IMAGE_ID; do
              if ! echo "$IMAGES_IN_USE" | grep -q "$IMAGE_ID"; then
                docker rmi "$IMAGE_ID" || true
              fi
            done

            docker system prune -af || true
