name: Docker Build and Deploy Backend Microservice

on:
  push:
    branches:
      - test
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_push_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go 1.23
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install dependencies
        working-directory: notifications
        run: go mod download

      - name: Build Docker image
        working-directory: notifications
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "NOTIFICATIONS_DB_NAME=${{ secrets.NOTIFICATIONS_DB_NAME }}" >> .env
          echo "RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          cp .env .env.prod
          docker build --build-arg ENV_FILE=.env.prod -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

  deploy_qa:
    needs: build_and_push_backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    steps:
      - name: Deploy to EC2 QA via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_NOTIFICATIONS_DOMAIN_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker ps -a --format '{{.Names}}' | grep -Eq "^backend$" && docker stop backend && docker rm backend
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            docker run -d \
              --name backend \
              -p 8001:8001 \
              -p 50051:50051 \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e NOTIFICATIONS_DB_NAME="${{ secrets.NOTIFICATIONS_DB_NAME }}" \
              -e RESPONSIBLE_DB_NAME="${{ secrets.RESPONSIBLE_DB_NAME }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            docker logs backend || true
            docker image prune -f
            docker images ${{ secrets.DOCKERHUB_USERNAME }}/backend --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +2 | head -n -1 | awk '{print $3}' | xargs -r docker rmi || true

  deploy_prod:
    needs: build_and_push_backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2 PROD via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_NOTIFICATIONS_DOMAIN_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          port: 22
          script: |
            docker ps -a --format '{{.Names}}' | grep -Eq "^backend$" && docker stop backend && docker rm backend
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            docker run -d \
              --name backend \
              -p 8001:8001 \
              -p 50051:50051 \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e NOTIFICATIONS_DB_NAME="${{ secrets.NOTIFICATIONS_DB_NAME }}" \
              -e RESPONSIBLE_DB_NAME="${{ secrets.RESPONSIBLE_DB_NAME }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            docker logs backend || true
            docker image prune -f
            docker images ${{ secrets.DOCKERHUB_USERNAME }}/backend --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +2 | head -n -1 | awk '{print $3}' | xargs -r docker rmi || true